# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jiUIhi6VmbY_6mYPjpGL7dzk5C5s63YX
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import io

st.set_option('deprecation.showPyplotGlobalUse', False)
st.title("FashionTrendChecker - MVP\nDemand Forecasting & Rekomendasi Produksi")

st.markdown("""
Aplikasi MVP untuk memprediksi penjualan periode berikutnya dan menghasilkan rekomendasi produksi.
Upload CSV (lihat contoh format di bawah). Untuk MVP, TrendScore boleh diisi manual (0-1).
""")

# Sidebar config
st.sidebar.header("Pengaturan")
test_size = st.sidebar.slider("Proporsi test set (%)", 10, 40, 20)
random_state = st.sidebar.number_input("Random state", min_value=0, value=42, step=1)
safety_buffer_mode = st.sidebar.selectbox("Buffer produksi (cara menghitung)",
                                         ("MAE (default)", "Percentage (10%)", "None"))
percent_buffer = st.sidebar.slider("Jika pakai Percentage, masukkan % buffer", 1, 50, 10)

st.subheader("Input Data")

mode = st.radio("Pilih metode input data:",
                ["Gunakan file dari Google Drive", "Upload file manual"])

if mode == "Gunakan file dari Google Drive":
    data_path = "/content/drive/MyDrive/FashionTrendChecker/data_sample.csv"
    try:
        data = pd.read_csv(data_path)
        st.success(f"✅ Data berhasil dimuat dari Google Drive:\n{data_path}")
    except:
        st.error("❌ File tidak ditemukan di Google Drive.\nPastikan path dan nama file sudah benar.")
        st.stop()

else:
    uploaded_file = st.file_uploader("Upload CSV data penjualan (.csv)", type=["csv"])
    if uploaded_file is None:
        st.warning("Silakan upload CSV untuk melanjutkan.")
        st.stop()
    data = pd.read_csv(uploaded_file)


# Read data
data = pd.read_csv(uploaded_file)
st.subheader("Preview Data")
st.dataframe(data.head(20))

# Prepare features
# If TrendScore and/or USD_IDR available, use them; otherwise fall back to index only
features = []
if 'TrendScore' in data.columns:
    features.append('TrendScore')
if 'USD_IDR' in data.columns:
    features.append('USD_IDR')

# Optionally, we can include lag features of Sales (previous month)
st.markdown("**Pengaturan fitur**")
use_lag = st.checkbox("Tambahkan lag-1 Sales sebagai fitur (menggunakan nilai sebelumnya)", value=True)
if use_lag:
    data = data.sort_values(by='Month').reset_index(drop=True)
    data['Sales_lag1'] = data['Sales'].shift(1)
    data = data.dropna().reset_index(drop=True)
    features.append('Sales_lag1')

if len(features) == 0:
    st.warning("Tidak ada fitur eksternal (TrendScore/USD_IDR). Model akan menggunakan index (bulan) sebagai fitur.")
    data['Month_idx'] = np.arange(len(data))
    features = ['Month_idx']

st.write("Fitur yang digunakan:", features)

X = data[features]
y = data['Sales']

# Train-test split
test_frac = test_size / 100.0
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_frac, random_state=int(random_state), shuffle=False)

# Train model
model = GradientBoostingRegressor(random_state=int(random_state))
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Metrics
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

st.subheader("Hasil Evaluasi Model")
st.metric("MAE", f"{mae:.2f}")
st.metric("RMSE", f"{rmse:.2f}")
st.metric("R²", f"{r2:.3f}")

# Interpretation text
st.markdown("**Interpretasi singkat:**")
if r2 >= 0.75:
    st.success(f"Model cukup baik (R² = {r2:.2f}). Model menjelaskan {r2*100:.1f}% variasi penjualan.")
elif r2 >= 0.5:
    st.info(f"Model sedang (R² = {r2:.2f}). Perlu fitur tambahan atau lebih banyak data.")
else:
    st.warning(f"Model lemah (R² = {r2:.2f}). Perlu pengembangan lebih lanjut.")

st.markdown(f"- MAE = {mae:.2f} → rata-rata kesalahan prediksi sekitar {mae:.1f} unit.\n- RMSE = {rmse:.2f} → kesalahan besar lebih berat berdampak pada metrik ini.")

# Show sample actual vs predicted
comp = pd.DataFrame({'Actual': y_test.values, 'Predicted': np.round(y_pred,2)})
st.subheader("Contoh Actual vs Predicted (Test Set)")
st.dataframe(comp.reset_index(drop=True).head(10))

# Plot actual vs predicted (line)
st.subheader("Grafik Actual vs Predicted")
plt.figure(figsize=(8,4))
plt.plot(comp['Actual'].values, marker='o', label='Actual')
plt.plot(comp['Predicted'].values, marker='x', label='Predicted')
plt.xlabel("Index Test")
plt.ylabel("Sales (unit)")
plt.legend()
plt.grid(True)
st.pyplot(plt)

# Residual plot
residuals = comp['Actual'] - comp['Predicted']
st.subheader("Residual Plot (Actual - Predicted)")
plt.figure(figsize=(8,3))
plt.axhline(0, color='black', linewidth=0.8)
plt.scatter(range(len(residuals)), residuals)
plt.xlabel("Index Test")
plt.ylabel("Residual")
st.pyplot(plt)

# Predict next period:
st.subheader("Prediksi & Rekomendasi Produksi untuk Periode Berikutnya")
# Prepare input for next period: use last row features; if Sales_lag1 used, create accordingly
last_row = data.iloc[-1:].copy()
next_input = {}
for f in features:
    if f == 'Sales_lag1':
        next_input[f] = [data['Sales'].iloc[-1]]  # last observed Sales becomes lag1
    elif f == 'Month_idx':
        next_input[f] = [data['Month_idx'].iloc[-1] + 1]
    else:
        # use same value as last row for TrendScore / USD_IDR but allow override
        val = float(last_row[f].values[0])
        next_input[f] = [st.number_input(f"Masukkan nilai {f} untuk periode berikutnya:", value=val)]

next_input_df = pd.DataFrame(next_input)
pred_next = model.predict(next_input_df)[0]
st.write(f"Prediksi penjualan periode berikutnya: **{pred_next:.1f} unit**")

# Rekomendasi produksi: memakai buffer sesuai pengaturan
if safety_buffer_mode == "MAE (default)":
    buffer = mae
elif safety_buffer_mode == "Percentage (10%)":
    buffer = pred_next * (percent_buffer/100.0)
else:
    buffer = 0.0

recommended = max(0, int(round(pred_next + buffer)))
st.success(f"Rekomendasi produksi (dengan buffer): **{recommended} pcs**")
st.caption(f"Buffer: {buffer:.2f} (mode: {safety_buffer_mode})")

# Allow export predicted + recommended as CSV
export_df = pd.DataFrame({
    "Next_period_pred": [pred_next],
    "Buffer": [buffer],
    "Recommended_production": [recommended]
})
csv = export_df.to_csv(index=False).encode('utf-8')
st.download_button(label="Download rekomendasi (CSV)", data=csv, file_name='recommendation.csv', mime='text/csv')

st.markdown("---")
st.markdown("**Catatan:** Untuk MVP, TrendScore dapat diisi manual. Pada versi lanjut, TrendScore akan diambil otomatis dari modul Trend Scraper.")

"""# Bagian Baru"""